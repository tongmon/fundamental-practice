WPF는 C#과 XAML을 이용해 구성하게 된다.
C#은 실제 로직단을 다루고 XAML은 UI단을 다루게 된다.

- <Window>
<Window> 내부에 정의된 속성 값들은 하위 속성들 값까지 영향을 미친다.
<Window FontSize="18"/>라면 하위 속성인 <Grid> 내부 UI의 FontSize도 18이 설정된다.
만약 <Grid FontSize="28">라면 Window 폰트 크기 18을 무시하고 Grid 폰트 크기 28을 따라간다.

- <Grid> 설명
여러 개의 원소들을 담을 수 있다.

- <Grid.ColumnDefinitions> <Grid.RowDefinitions> 설명
<Grid.ColumnDefinitions>
    <ColumnDefinition Width="20"/>
    <ColumnDefinition Width="auto"/>
</Grid.ColumnDefinitions>
<Grid.RowDefinitions>
    <RowDefinition Height="*"/>
</Grid.RowDefinitions>
위와 같이 생기면 1행(Row) 2열(Col)의 테이블이 <Grid> 내부에 생성된다.
길이를 재는 방법은 다양하게 있는데 직접 수치를 줄 수도 있고(이 경우 명확한 픽셀값이 들어가게 된다.) auto를 줘서 안에 채워진 컨텐츠 만큼의 크기로 설정할 수도 있고 *를 줘서 남은 나머지 부분의 크기로 설정할 수도 있다. (*는 유니버셜 크기로 비율을 나타낸다.)

- Grid.Colum, Grid.Row 속성
특정 블록을 지정할 때는 Grid.Colum, Grid.Row를 사용한다.
<TextBlock Grid.Colum="1" Grid.Row="1"/>이면 두번째 열, 두번째 행이 선택되고 여기에 TextBlock이 박힌다. (즉 Grid는 0부터 시작이다.)

- Grid.ColumnSpan, Grid.RowSpan 속성
해당 속성은 격자에서 특정 열(혹은 행)이 옆의 칸을 얼마나 먹을 것인지를 결정하게 된다.
예를 들어 |  |  |  | 이러한 칸이 있다면 Grid.ColumnSpan="3" 이렇게 지정되었다면 |         | 이러한 한 칸으로 취급이 된다.

- <StackPanel>
Orientation 속성에 따라 밑으로 쌓던지 옆으로 쌓던지 UI들을 여러개 쌓을 수 있는 구조를 만들어 주는 녀석이다.
보통 Gird 안에 StackPanel을 넣고 여러 개의 이미지, 버튼, 컨트롤 들을 때려 박는다.

- <WrapPanel>
StackPanel과 비슷하지만 쌓는 구조가 아니라 최대한 정사각형에 가까운 형태로 컨트롤들을 구성해준다.

- <ScrollView>
해당 뷰 내부의 컨텐츠가 길 경우에 스크롤이 생긴다. 스크롤 뷰 내부의 컨텐츠는 하나 밖에 오지 못하므로 스크롤 뷰 안에 패널 종류나 Grid를 넣어 놓고 여러 개의 컨트롤을 집어넣는 방식으로 사용한다.

- <ComboBox>
콤보박스다. <ComboBox.ItemTemplate>을 통해 콤보 박스 내부의 아이템 템플릿을 지정해 줄 수가 있다.
아이템 템플릿 중에서 데이터 템플릿 <DataTemplate>을 지정해줄수 있다.
<DataTemplate> 내부에서 데이터 바인딩이 가능한데 예시를 보자.

class Creature
{
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public string FullName { get { return FirstName + ' ' + LastName; } set { FullName = value; } }
}
위와 같은 클래스가 있다고 해보자.
List<Creature> list = new List<Creature>();
list.Add(new Creature { FirstName = "Groot", LastName = "I AM" });
list.Add(new Creature { FirstName = "Captain", LastName = "America" });
list.Add(new Creature { FirstName = "Infinite", LastName = "Power" });
myCombo.ItemsSource = list;
해당 클래스를 리스트화 하여 콤보 박스 아이템으로 넣었다.
이러한 상황에서 xaml의 콤보박스 코드를 다음과 같이 구현했다고 하자.
<ComboBox x:Name="myCombo" Width="100" Height="30">
    <ComboBox.ItemTemplate>
        <DataTemplate>
            <TextBlock Text="{Binding FullName}"/>
        </DataTemplate>
    </ComboBox.ItemTemplate>
</ComboBox>
이것의 출력과 밑 코드의 출력은 같다.
<ComboBox x:Name="myCombo" Width="100" Height="30">
    <ComboBox.ItemTemplate>
        <DataTemplate>
            <TextBlock Text="{Binding FirstName}"/>
			<TextBlock Text=" "/>
			<TextBlock Text="{Binding LastName}"/>
        </DataTemplate>
    </ComboBox.ItemTemplate>
</ComboBox>
여기에서 <DataTemplate> 내부에 이미지를 추가하여 콤보박스 리스트에 이미지가 보이게 할 수도 있고 여러가지가 가능하다.