int sum() const; -> 이렇게 함수 뒤에 const가 붙는 녀석들은 일단 클래스 함수 여야 가능하고 이 의미는 멤버 변수를 수정하지 않는 함수라는 것이다... 속도면에서 이득이다.

"hello" -> 이런 상수 스트링은 리터럴 풀링 이용

const char* str = R"-(앙 기모띠 \t \n 이러면 탭, 엔터가 안쳐지고 그대로)-" -> 실제 출력: 앙 기모띠 \t \n 이러면 탭, 엔터가 안쳐지고 그대로
보면 R은 -(, )-로 끝나는데 (,) 이외의 글자(여기서 -)는 임의로 정하면 된다. 예를 들어 ang(~~~~~)ang 하면 ~~~~~ 여기에 R이 적용

string_view -> 거의 const string& 역할이지만 상수 문자열에 대한 리터럴 풀링을 없애주기에 좀 더 빠른 속도 보장
string_view vstr = "hi hi hi";
string str = vstr.data() // string_view는 c_str()이 없음

프로그래밍 디자인에서 추상화와 재사용성은 항상 챙긴다.

추상화라는 것은 간단히 말하면 밑과 같다.

class ChessBoard
{
	private:
		int Board[8][8];
	public:
		setBoard(int x, int y, int val);
};

여기서 보듯이 체스 보드를 설정할 경우 Board[0][0] = 1 이렇게 직접 넣지 않고 setBoard(0, 0, 1) 이렇게 넣게 하는 것이 추상화다.
해당 클래스 사용자는 내부 구조를 알 필요가 없다. (알고 싶지도 않을 것임.)