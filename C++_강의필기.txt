어떤 자료형의 최대값, 최솟값을 알고 싶다면 std::numeric_limits<type>::max() 나 min()을 이용할 것

if문 내의 조건식이 복잡하다면 드 모르간의 법칙을 이용해 볼 것

struct 구조체에는 맞춤(align)이라는 개념이 있다.
일단 구조체 내부 변수 중에 가장 크기가 큰 자료형을 잡고 해당 되는 크기의 블록으로 구조체 변수에 해당하는 메모리를 구성한다.
밑은 예시다.
struct Person
{
	float height;
	float weight;
	char name[10];
	short grade;
};
여기서 sizeof(Person)을 하면 20이라는 크기가 나온다.
float은 4byte로 2개 담겨있고 short는 2byte로 1개, 그리고 1byte인 char형 크기 10의 배열 하나가 담겨있다.
총 4+4+10+2=20이라 20이 나온 것이다.
하지만 항상 그럴까?

struct Huge_Person
{
	float height;
	short grade;
	float weight;
	char name[10];
};
구조체 내부 변수의 선언 순서가 이와 같이 바뀌면 어떻게 될까?
이 경우 sizeof(Person)을 하면 24가 나온다.

이러한 두 경우를 비교해보면 다음과 같다.
Person 구조체의 경우를 보면 내부 구조체 변수에서 가장 큰 크기를 가지는 단일 변수는 float형이고 이때 4byte의 크기를 가진다. (따라서 메모리 블록을 4byte 단위로 끊어 생성한다.)
이제 다시 내부 변수들을 보면 height -> 4byte로 블록에 딱 맞는다. 블록에 끼우고 다음 weight -> 4byte로 블록에 딱 맞는다.
다음 char name[10]을 보면 4byte끼우고 6byte남아서 다시 4byte끼우고 2byte남아서 4byte끼운다. 지금 여기까지 메모리 블록 상태는 다음과 같다.
height | weight | name(4) | name(4) | name(2) + 나머지 2byte ('|' 사이 간격은 4byte이다.)
2byte가 남아서 short형인 grade를 끼우니 딱 20byte로 메모리 정렬이 되고 최종적으로 메모리 블록 구조는 다음과 같다.
height | weight | name(4) | name(4) | name(2) + grade
Huge_Person 구조체의 경우를 보면 내부 구조체 변수에서 가장 큰 크기를 가지는 단일 변수는 Person 구조체와 똑같다.
height, grade를 메모리에 끼우면 height | grade + 나머지 2byte가 된다.
그 다음 weight를 끼우게 되면 height | grade + 나머지 2byte | weight이 된다. 나머지 2byte에 weight을 모두 끼울 수 없기 때문에 4byte블록을 따로 생성하게 된다.
그 다음에 char name[10]을 끼우게 되면 height | grade + 나머지 2byte | weight | name(4) | name(4) | name(2) + 나머지 2byte 가 된다.
이렇게 제일 큰 크기의 블록으로 메모리를 최적화 때문에 나누게 된다는 것을 잊지 말자.

근데 이러한 블록 크기를 강제를 할 수 있는데 그 키워드가 바로 alignas(크기)이다.
struct alignas(16) Person
{
	float height;
	float weight;
	char name[10];
	short grade;
};
이렇게 된다면 height weight name(8) | name(2) grade + 나머지 12byte 가 되어 결과적으로 Person에 할당되는 메모리는 32byte가 될 것이다.
특정 구조체가 어떤 크기 기준으로 정렬이 되어있는지를 알려면 alignof(구조체)를 사용하게 된다.

포인터 *에서 타입은 중요하다. 괜히 int*, float* 이렇게 타입에 따른 포인터가 따로 있는 것이 아니다. 주소를 해석하는데 차이가 발생한다.
const int*와 int* const도 차이가 있다.
const int*는 포인터가 가리키는 녀석의 값을 바꾸지 못한다.
예를 보면 const int* p = &num이면 num의 값을 못바꾼다. 즉 *p = 1; 이런게 안된다. num의 주소는 바꿀 수 있다.
int* const는 포인터가 가리키는 녀석의 주소값을 바꾸지 못한다.
예를 보면 int* const p = &num이면 p = 1; 이렇게 &num을 바꿀 수 없다. *p = 1;은 가능하다.
포인터에게 강력한 제약을 걸고 싶다면 const int* const p; 이렇게 하면 된다.

배열에서의 포인터는 약간 독특하게 돌아간다.
int ary[] = {1,2,3};
이렇게 선언된 상태에서 ary는 &ary[0]과 같고 ary+1은 &ary[1], *(ary+1)과 같다.
하지만 &ary는 약간 특이한 방식으로 돌아간다는 것을 기억하자.
&ary는 무엇을 뜻하냐면 int를 3개 담고있는 배열형의 포인터를 가리킨다.
마치 std::array를 생각하면 편하다. int ary[] = {1,2,3}이나 std::array<int,3> ary{1,2,3};이나 비슷한 동작을 한다는 것과 같은 원리이다.
따라서 int third[] = {1,2,3}; int forth[] = {1,2,3,4};에서 &third와 &forth는 포인터 형부터 차이가 있다.
정확한 타입을 알려주는 typeid(변수) 함수를 이용하면 이 둘의 차이를 알 수 있다.
typeid(&third).name()과 typeid(&forth).name()는 자료형에 차이가 있지만 typeid(&third[0]).name()과 typeid(&forth[0]).name()는 자료형 차이가 없다.

동적할당 초기화 표현법
int* arr = new int[3]{1,2,3}; -> 이렇게 초기화 가능
동적할당 해제된 포인터에 대해서는 nullptr 처리를 해주어야 추후에 포인터 검사를 정확히 할 수 있다.
arr = nullptr; if(arr) { /* 작업 */ } 이렇게 처리가능한데 만약 arr이 해제되었는데 arr = nullptr;을 하지 않았다면 저 if문 처럼 판단이 불가하다.
그리고 NULL과 nullptr은 차이가 있는데 int func(int k) {cout << k << endl;} 이러한 함수에서 func(NULL)은 NULL이 정수형 0 취급이라 표현이 가능하지만 func(nullptr) 이러한 표현은 불가능하다.

void 포인터는 주솟값만을 가질 수 있다. 명확하게 표현하려면 원본 포인터로 형변환 시켜줘야 된다.
int a = 10;
int *num = &a;
void *vnum = num;
cout << *(int*)vnum << endl;  -> 이렇게 void 포인터인 vnum을 int형 포인터로 변환한 뒤에 실제값을 얻기 위해 *을 붙여주어야 명확한 값을 얻을 수 있다.
이러한 void 포인터는 특정 바이트를 동적할당만 해주고 추후에 명확한 형으로 값을 넣어주는 경우에 사용하게 된다.

vector<T>에 대한 <, >, ==, <=, >= 비교 연산자는 기본적으로 정의되어 있다.
vector<int> A{1,2,3}, B{3,2,1}; 이 상황에서 if(A < B) {} 이러한 표현이 가능하다.

함수 포인터는 보통 밑과 같이 조건에 따라 사용되는 함수가 다른데 이를 숏코딩하거나 가독성을 늘리고 싶을 때 사용한다.
enum class ReqType { Login, Register, Logout };

bool onLogin(string id, string pw) { /* 내용 */ return true; }
bool onRegister(string id, string pw) { /* 내용 */ return true; }
bool onLogout(string id, string pw) { /* 내용 */ return true; }

int main()
{
	bool (*funcPtrAry[])(string, string) { onLogin, onRegister, onLogout }; // 포인터 배열을 이용
	// function<bool(string,string)> funcPtrAry[] = {onLogin, onRegister, onLogout}; 얘도 가능
	
	// using defFuncPtrAry = bool(*)(string, string); 이걸 하면
	// defFuncPtrAry funcPtrAry[] = { onLogin, onRegister, onLogout }; 얘도 가능
	
	ReqType type = ReqType::Login;
	/*어떤 처리*/
	
	funcPtrAry[(int)type]("tongstar", "tongtong");
}

-define 함수의 위험성
#define SQUARE(X) X*X

int main()
{
	int n = 10;
	cout << SQUARE(++n);
}
저 SQUARE값은 컴파일러에 따라 달라지기 때문에 define으로 함수를 만들어 쓰기보다는 inline 함수를 만들어 사용하자.

-this 포인터 활용법

struct Transaction
{
	const int txID;
	const int fromID;
	const int toID;
	const int value;
};

class TransactionBuilder
{
	int mfromID;
	int mtoID;
	int mvalue;
	
public:
	Transaction build() {
		int txID = mfromID ^ mtoID ^ mvalue;
		return { txID, mfromID, mtoID, mvalue };
	}
	
	TransactionBuilder& setFromID(int fromID) {
		mfromID = fromID;
		return *this;
	}
};

int main()
{
	Transaction txTemp = TransactionBuilder().setFromID(1212).build(); // 이러한 표현이 가능
}

이렇게 this 포인터를 이용하면 TransactionBuilder() 이렇게 임시 객체를 생성하여 함수를 호출해 나갈 수가 있다.
사실 이 표현은 연산자를 오버로딩하는 경우에 많이 쓰이고 있다.

-클래스 내부 static 변수
class Person
{
public:
	static int m_Age;
	static void GetAge()
	{
		return m_Age;
	}
};

int main()
{
	Person::m_Age;
	Person var_Person, var_Person2;
	var_Person.m_Age;
}
위와 같이 static 멤버 변수는 같은 형의 클래스끼리 공유하게 되어 Person::m_Age, var_Person.m_Age 이렇게 모두 참조가 가능하다.
즉 m_Age를 var_Person에서 수정하면 이는 var_Person2와 Person::m_Age에 영향을 미친다.
GetAge와 같은 static 멤버함수는 static 멤버변수만을 다룰 수가 있고 일반 멤버 변수를 다루는 것은 허용하지 않는다. 
또한 const 멤버함수로 만들지도 못한다. ex). static void GetAge() const { return m_Age; } -> X

-자잘팁
cout.setf(ios_base::boolalpha); -> bool 값에 따라 1, 0이 아닌 true, false로 출력하게 해준다.
std::for_each(~~~.begin(), ~~~.end(), 어떤 함수)는 특정 배열의 원소를 돌면서 지정된 함수를 실행시킨다. (for문을 사용하는 코드를 줄여준다고 보면 된다.)
plus<int> p; p(1, 2)를 하면 1+2인 3이 나온다.
negate<int> q; q(3)를 하면 -1을 곱한 수인 -3이 나온다.
equal_to<int> r; r(2, 1)를 하면 2와 1이 다르기에 0이 나온다. (같은 수를 넣으면 1이 나온다.)
위의 functor들은 보통 임시객체를 호출하고 바로 사용하지 않을까 싶다... 예를 들면 equal_to<int>()(1, 2) 이렇게 말이다.

-우주선 연산자 (<=>)
기호는 <=> 이것이고 C++20 이후부터 헤더 <compare>에서 지원을 한다. 
생긴 것과 같이 대소 비교, 값이 같은지 모두 한번에 수행한다.
반환값은 strong_ordering, weak_ordering, partial_ordering으로 각기 다르다.
두개의 char 배열을 비교하는 strcmp() 함수가 값을 '0 초과', '0', '0 미만' 이렇게 반환하는 원리와 같다.
따라서 우주선 연산자도 이와 같이 0을 기점으로 비교를 할 수가 있다.
예를 들어 char A = 'A', B = 'B'; 이렇게 두 char 문자가 있다고 하자. 
물론 A가 사전순으로 더 앞이니 A < B임은 명백하다.
여기서 (A <=> B) < 0이다. 왜냐면 우주선 연산자는 항상 좌측을 기준으로 이 녀석이 우측보다 큰지 작은지를 따지게 되는데 A가 B보다 작기 때문에 0보다 작다.
그러면 B <=> A 는 어떻게 될까? 당연히 (B <=> A) > 0이다.
같은 경우를 생각해보자. A = 'A'이고 B = 'B'이면 (A <=> B) == 0 이 도출된다.
우주선 연산자를 지금까지 0과 비교해왔는데 정확한 반환형은 단순한 숫자가 아니라 strong_ordering::less, strong_ordering::greater, strong_ordering::equal
weak_ordering::less 등등... 의 형태다.
이렇게 간단한 비교에 <=>를 사용하는 것은 그냥 <, =, > 비교 연산자를 따로 사용하는 것으로 대체하기가 쉽다.
<=>의 보통 쓰임새를 예로 들어보면 사각형에 대한 비교이다. 예를 들어 직사각형을 보면 가로, 세로라는 특징이 있고 또 이를 통해 넓이라는 값까지 도출될 수 있다.
가로: 2cm, 세로: 5cm인 직사각형과 가로: 3cm, 세로: 1cm인 직사각형은 명백히 다르다는 것을 알 수 있다.
하지만 가로: 2cm, 세로: 5cm인 직사각형과 가로: 5cm, 세로: 2cm인 직사각형은 명백히 다르다고 할 수 있는가? 넓이가 같고 해당 직사각형을 90도 돌리면 같아질 수도 있는데?
이러한 경우 weak_ordering과 같은 규칙이 필요하고 이 경우 우주적 연산자를 사용하게 된다.
우주선 연산자의 각 반환값을 보자면 다음과 같다.
1. strong_ordering은 말 그대로 강력한 질서를 나타낸다. A와 B를 비교하는 경우 ==, !=, <, <=, >, >= 이러한 비교 연산자의 결과가 모두 명확하게 도출될 수 있는 경우에 쓰인다.
2. weak_ordering은 strong_ordering보다 약한 질서로 실제로 같지는 않지만 같은 것을 모형화하는 경우에 사용된다. 
A와 B를 비교하는 경우 ==, !=, <, <=, >, >= 여기 중에서 어떠한 경우에라도 ==, <, > 중 하나는 명확하게 참이여야 한다. (즉 이러한 3개의 비교 연산자에 대해서 만큼은 참 거짓 판별이 가능해야 한다.)
위에서 예로 들었던 직사각형 비교가 여기에 속한다. 직사각형 예시를 보면 알겠지만 ==인 경우에 대해 완벽하게 같지는 않지만 동등이라고 보는 것이 특징이다.
3. partial_ordering은 weak_ordering보다 약한 질서로 float, double과 같은 부동소수점에 대한 비교가 허용된다는 점이다.
즉 1 <=> 1.0 이렇게 비교하면 도출값은 partial_ordering::equivalent가 나온다. int와 float(아니면 double)의 비교는 비트의 개수부터가 다르기 때문에 ==이 동등을 모형화하고 있다고 보는 것이다.
다음은 코드 예시이다.

class Rectangle
{
	int mWidth;
	int mHeight;
public:
	Rectangle(int w, int h) { mWidth = w; mHeight = h; }
	auto operator<=>(const Rectangle& cmp) const {
		if (mWidth != cmp.mWidth || mHeight != cmp.mHeight) {
			if (mWidth * mHeight == cmp.mWidth * cmp.mHeight)
				return 0;
			if (mWidth * mHeight > cmp.mWidth * cmp.mHeight)
				return 1;
			else
				return -1;
		}
		return 0;
	}
	bool operator==(const Rectangle& cmp) const {
		return mWidth * mHeight == cmp.mWidth * cmp.mHeight;
	}
};

int main()
{
	Rectangle A(5, 2);
	Rectangle B(2, 5);
	if (A == B)
		cout << "This Rectangle is Same\n";
	if(A < B)
		cout << "A is Bigger\n";
	if(A > B)
		cout << "A is Bigger\n";
	if(A <= B)
		cout << "A is Same or Lesser\n";
	if(A >= B)
		cout << "A is Same or Bigger\n";
	if (A != B)
		cout << "A and B is not Same\n";
}

이렇게 <=>과 ==만을 정의해주면 나머지 비교 연산자에 대해서도 모두 operator 정의가 된다는 것도 장점이다. (주의점은 ==은 꼭 따로 정의해주어야 한다.)

&&, || 연산자의 오버로딩 주의점
기본적으로 정의되어 있는 &&, || 연산자는 최적화를 위해 특정 조건에서 뒤의 연산을 무시하는 규칙이 있다.
false && 어떤 짓 -> 앞이 false이기에 어떤 짓을 행하지 않는다.
true || 어떤 짓 -> 앞이 true이기에 어떤 짓을 행하지 않는다.
이러한 원리가 &&, ||를 오버로딩해서 사용하면 깨진다.
연산자 오퍼레이터는 결국에 함수이고 함수의 인자로 들어오는 녀석은 실행이 되거나 값을 받게 되는데 이때 기본적인 &&, || 연산자와 다르게 작동할 수 있다.

생성자는 형변환 연산자라고 볼 수 있다. (실제로 생긴 것도 형변환이랑 비슷하다.)
class String
{
	char * mChar;
public:
	String(const char *) { /*어떤 짓*/ }
}

void func(String str) { /*어떤 짓*/ }

이 상태에서 func("abc") 하면 컴파일러가 자동적으로 func(String("abc"))로 바꿔줘서 정상적으로 돌아간다.
근데 String(const char *) { /*어떤 짓*/ } 얘를 explicit String(const char *) { /*어떤 짓*/ } 으로 하면 func("abc") 이게 암시적 변환이 막히기 때문에 안된다.
명시적으로 func(String("abc")) 해줘야만 된다.

- 형변환 연산자 오퍼레이터
밑의 예시를 보면 if(myCandys) {} 이렇게 클래스를 bool형으로 사용하는 경우가 나오는데 이것이 형변환 연산자를 operator bool() 로 재정의하여 가능한 것이다.
class CandyBag
{
	vector<string> mCandys;
public:
	CandyBag() {}
	CandyBag(initializer_list<string> list) {
		for (auto& str : list)
			mCandys.push_back(str);
	}
	CandyBag(vector<string>&& Candys) { mCandys = move(Candys); }
	void Clear() { mCandys.clear(); }
	operator bool() { return !mCandys.empty(); }
};

int main()
{
	CandyBag myCandys{ "white", "choco", "mint" };
	if (myCandys) {
		cout << "I have Candy\n";
	}
	myCandys.Clear();
	if (!myCandys) {
		cout << "I don't have any Candy\n";
	}
}
CandyBag에 캔디가 있다면 bool 형변환 시에 true를 반환하고 캔디가 없다면 false를 반환하게 된다.
여타 operator는 변환형이 맨 앞에 나오고 함수 인자도 받았지만 형변환 operator는 형변환 연산자를 재정의하기에 인자와 반환형이 필요없다.

-chrono 표준 시간 라이브러리 헤더
시간을 다루는 std로 사용법은 다음과 같다.
std::chrono::minute varMin = 24h + 5min; varMin.count(); // minute 형이기에 count()를 하면 분이 나온다.
std::chrono::seconds varSec = 24h + 5min + 10s; varSec.count(); // seconds 형이기에 count()를 하면 초가 나온다.

- 접미사, 단위 붙이기(사실상 operator, 정확한 명칭은 리터럴 연산자 오퍼레이터)
std::chrono를 보면 해당 변수가 특이한데 시간은 h, 분은 m과 같은 접미사가 붙는다.
이런 것들도 operator를 이용한다. 짜는 법은 다음과 같다. 길이 접미사를 붙여본 코드이다.
주의점은 리터럴 연산자는 클래스 내부 멤버함수로 구현이 불가능하여 friend 함수로 만들어 주는 것이 좋다.
그리고 리터럴 연산자를 만들어 줄 수 있는 기본 자료형도 한정적이다. 
기본적으로 음수는 불가능하여 따로 -에 대한 오퍼레이터를 또 정의해주어야 한다. 실수형은 long double만 된다.
밑은 길이로 만들어본 리터럴 연산자 오퍼레이터 예시 코드이다.
class Centi
{
	long double m_Centimeter;
public:
	Centi(long double val = 0) : m_Centimeter(val) {}
	long double GetCentiMeter() { return m_Centimeter; }
	friend Centi operator-(Centi&& A, Centi&& B);
	friend Centi operator+(Centi&& A, Centi&& B);
	Centi operator-() { return Centi(-m_Centimeter); }
};

Centi operator-(Centi&& A, Centi&& B)
{
	return Centi(A.m_Centimeter - B.m_Centimeter);
}

Centi operator+(Centi&& A, Centi&& B)
{
	return Centi(A.m_Centimeter + B.m_Centimeter);
}

Centi operator"" mm(unsigned long long int val)
{
	return Centi(val * 0.1);
}

Centi operator"" mm(long double val) {
	return Centi(val * 0.1);
}

Centi operator"" cm(unsigned long long int val) {
	return Centi(val);
}

Centi operator"" cm(long double val) {
	return Centi(val);
}

Centi operator"" m(unsigned long long int val) {
	return Centi(val * 1e2);
}

Centi operator"" m(long double val) {
	return Centi(val * 1e2);
}

Centi operator"" km(unsigned long long int val) {
	return Centi(val * 1e5);
}

Centi operator"" km(long double val) {
	return Centi(val * 1e5);
}

int main()
{
	Centi centimeter = 1.0km + 1m + 1cm - 1mm;
	cout << fixed << centimeter.GetCentiMeter() << "cm" << endl;
}
이 코드에서 *, / 이와 같은 연산자 오버로딩을 사용해서 기능을 불려나갈 수도 있다.
중요한 것은 long double val 인자만 사용하는 경우는 1.0km는 사용가능하지만 1km와 같은 int형 원소를 다루지 못한다.
따라서 unsigned long long int val을 인자로 사용하는 함수를 오버로딩 해주었다.
그리고 기본적으로 단일로 -1km 이러한 표현도 불가능하기에 Centi operator-() { return Centi(-m_Centimeter); } 해당 함수도 추가하였다.
리터럴의 이름에는 되도록 _를 추가하는 것이 이름을 겹치지 않게 하는 것에 좋다. (_cm 같이...)

-상속 이용
게임을 코드로 구현해야 하는 상황을 가정해보자.
게임 내에는 생명력이 있는 생명체가 있다. 생명체는 플레이어일 수도 있고 몬스터일 수도 있다.
플레이어나 몬스터나 공통적인 특성을 가지게 되는 것이다.
class Creature
{
protected:
		int m_Health;
		int m_Power;
};