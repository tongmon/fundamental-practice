C++과 극명하게 다르거나 생소한 것들만 정리함

- 콘솔 프로그램에서의 기본 구조
namespace Intro_Ex1
{
    class Program
    {
        static void Main(string[] args)
        {
            var i = 1;
            var j = " this is c#";
            var k = i + j;

            System.Console.WriteLine(k);
        }
    }
}
위와 같이 namespace로 감싸고 내부에 클래스 선언하고 그 내부에 함수를 정의해서 구현한다.
C#은 따로 헤더 파일이 없다.

- readonly 
런타임시 값이 결정되는 키워드다. 클래스 내부 변수에만 사용이 가능하다.
생성자에서 딱 한번 초기화 할 수 있고 나머지 방법으로는 초기화가 불가능하다는 점에서 const와 다르다.
밑은 예시이다.

using System;

namespace ConsoleApplication1
{
    class CSVar
    {
        // 상수
        const int MAX_VALUE = 1024;

        // readonly 필드 
        readonly int Max;
        public CSVar() 
        {
           Max = 1;
        }
    }
	
	class Program
    {
        static void Main(string[] args)
        {
            CSVar tmpCSvar = new CSVar();
			tmpCSvar.Max = 1; // Error, Max는 readonly 변수라 불가능한 표현이다.
        }
    }
}

- 일차원 배열
C++ 스타일 - int ary[] = {1, 2, 3}; int *ary = new int[3];
C# 스타일 - int[] ary = {1, 2, 3}; int []ary = new int[3];

- 다차원 정적 배열
C++ 스타일
int ary[2][2] = { {1,2},{3,4} }; 
ary[0][0] = 1;

C# 스타일
int[,] ary = { { 1, 2 }, { 3, 4 } }; // ary[0,0] -> 1, ary[0,1] -> 2, ary[1,0] -> 3, ary[1,1] -> 4
ary[0, 0] = 1;

- 다차원 동적 배열
C++ 스타일
int** ary = new int*[2];
ary[0] = new int[2];
ary[1] = new int[2];
ary[0][0] = 1;

C# 스타일
int[][] ary = new int[2][];
ary[0] = new int[2];
ary[1] = new int[2];
ary[0][0] = 1;

- 함수에 배열 전달
C++ 스타일
int func(int *ary) { return ary[0]; }

C# 스타일
int func(int[] ary) { return ary[0]; }

- 수정 불가 문자열 string
C++의 std::string과 유사하다.
하지만 극명한 차이가 있는데 C#의 string은 한번 값이 정해지면 못바꾼다.
즉 C++의 const std::string이 C#의 스트링이다.
C++ string	|	C# string
length()   -->	Length
c_str()    -->	ToCharArray()

- 수정 가능 문자열 StringBuilder
사용하기 위해선 using System.Text;를 C++의 헤더와 같이 선언해줘야 한다.
StringBuilder sb = new StringBuilder();
sb.Append("this"); // sb = "this"; 이런 표현은 안되더라...
sb[0] = 'T';

- enum
C++과 거의 비슷하다. C#은 다중 플래그를 좀 편하게 지원한다.
C++ 스타일 (C++에선 enum class를 지향하여 예시도 enum class로 구현함)
enum class Border : int
{
	None = 0,
	Top = 1,
	Right = 2,
	Bottom = 4,
	Left = 8
};

int main()
{
	int b = (int)Border::Top | (int)Border::Bottom;

	if (b & (int)Border::Top)
		cout << "Top";
}

C# 스타일
class Program
{
    enum Border
    {
        None = 0,
        Top = 1,
        Right = 2,
        Bottom = 4,
        Left = 8
    };
	
    static void Main(string[] args)
    {
        Border b = Border.Top | Border.Bottom;

        if((b & Border.Top) != 0)
            System.Console.WriteLine("Top");
        /*
		// 밑의 표현도 가능하다.
        if (b.HasFlag(Border.Top))
            System.Console.WriteLine("Top");
        */
    }
}

- ? 변수
C#에서 변수명 앞에 ?가 붙는 경우가 있는데 ?가 붙은 변수는 null일 수도 있는 것이다.
C++의 std::optional<>과 비슷하다고 보면된다.
예를 들어 int? k = 1; 이것도 가능하지만 int? k = null; 이것도 가능하다.
특정 변수에 값이 완전히 없는 상태를 나타내기 위해 사용한다.

- 연산자
대부분의 연산자들은 C++과 같다.
추가적으로 C#에는 ?? 연산자가 존재한다.
어떤 변수가 null인지 아닌지를 판단할 때 사용된다.
사용법은 다음과 같다. int num = (어떤 ?가 붙은 변수) ?? (반환값);
어떤 ?가 붙은 변수가 null이 아닌 경우 해당 ?가 붙은 변수를 반환하고 null인 경우 반환값을 반환한다.
예시는 밑과 같다.
int? n_1 = 1;
int num = n_1 ?? 0; // 이 경우 num은 1이다.
int? n_2 = null;
num = n_2 ?? 0; // 이 경우 num은 0이다.

- 조건문
C++과 동일하다.

- 반복문
고전적인 반복문들 for(;;), while, do while은 C++과 똑같다.
foreach 문은 약간 다르다.
C++ 스타일
int ary[] = { 1,2,3,4 };
for (auto& num : ary)
	cout << num;
	
C# 스타일
int[] ary = { 1, 2, 3, 4 };
foreach (int num in ary)
    Console.WriteLine(num);
	
- yield
foreach문을 사용하는 경우 itorator 조작이 쉽게 하기 위해서 사용된다.
그 외에 어떤 상태를 표현하는 경우 사용된다.
정의만 보면 어떻게 사용하고 머하는 녀석인지 이해하기 어려우니 예시를 들겠다.
해당 예시를 이해하려면 IEnumerator, IEnumerable에 대한 내용을 대강 알아야 한다.
IEnumerable 이 녀석은 함수 호출에 대한 반복자(반복기 메서드)라고 생각하면된다.
다시 말해서 호출할 때마다 반복해서 반환값이 바뀌는 것이 정해진 함수의 반환형은 이 녀석이 되어야 한다.
IEnumerator 이 녀석은 C++의 itorator와 하는 기능이 비슷하다. 그냥 반복자라고 생각하면 된다.
예전 C#에서는 새로운 class를 만들때 이러한 반복기 메서드나 반복자를 정의하기 위해서 IEnumerator나 IEnumerable 이 녀석을 상속받아야 했다.
최신 C#에서는 반환형에 yield를 사용하면 상속받지 않고 그냥 재정의해서 사용할 수 있다.

다음은 어떤 상태를 표현하는 경우에 대한 예시이다.
class Program
{
    enum State
    {
        Baby,
        Kid,
        Adult,
        Old
    }
    static IEnumerable Aging()
    {
        yield return State.Baby; // 첫번째 호출은 여기서 반환한 뒤 종료.
        yield return State.Kid; // 두번째 호출은 여기서 시작 후 반환하고 종료.
        yield return State.Adult; // 세번째 호출은 여기서 시작 후 반환하고 종료.
        yield return State.Old; // 네번째 호출은 여기서 시작 후 반환하고 종료.
    }
    static void Main(string[] args)
    {
        foreach(var age in Aging()) {
            /*
            나이 상태에 따른 처리... 
            */
        }
    }
}
Main 함수 내부의 foreach문 안에서 상태가 돌아가게 되는데 Aging() 호출에 따라 Baby에서 Old 순으로 호출이 된다.
즉 Aging() 함수를 3번 호출하는 경우 반환값은 State.Adult가 된다.

다음은 foreach문 사용을 쉽게하는 경우에 대한 예시이다.
C++에서 자료구조 STL마다 존재하는 itorator는 예를 들면 vector<int>::itorator v_itor; 이렇게 생겼다면 C#에서는 IEnumerator이다.
IEnumerator 사용하려면 using System.Collections;를 선언해주어야한다.
C#의 itorator는 자료형을 명확히 써줄 필요가 없다. (C#이 컴파일 시간에 모든 것이 결정되어야 하는 언어가 아니기에...)
class Program
{
    public class MyArray
    {
        private int[] m_data;

        public MyArray(int n, int[]? ary = null) {
            m_data = new int[n];
            if (ary != null) {
                for (int i = 0; i < n; i++) {
                    m_data[i] = ary[i];
                }
            }
        }
        public IEnumerator GetEnumerator()
        {
            int i = 0;
            while (i < m_data.Length)
            {
                yield return m_data[i];
                i++;
            }
        }
    }

    static void Main(string[] args)
    {
        int[] ary = { 1, 2, 3 };
        MyArray array = new MyArray(3, ary);
        foreach(var i in array) { 
            Console.WriteLine(i);
        }
    }
}
여기 Main 함수 내부의 foreach 함수가 작동할 수 있는 이유는 GetEnumerator() 이 녀석이 재정의되었기 때문이다.
그리고 IEnumerator 상속없이 GetEnumerator() 이 녀석이 재정이 될 수 있는 이유는 해당 함수 내부 return 앞에 yield 값이 붙어 있기 때문이다.

- 네임스페이스
그냥 C++과 같은 원리의 namespace이다.
단지 C#에서는 얘네를 헤더 파일 쓰듯이 사용한다.
사실 얘네 없이 코드를 쓸 수도 있다. 단지 길어진다...
예를 들면 using System;를 하면 Console.WriteLine();가 되지만 using System;를 안하면 System.Console.WriteLine();처럼 System을 명시해줘야한다.

- 구조체와 클래스
C#은 주소값을 직접적으로 제어하지 않기에 값으로 전달하는 경우는 구조체를 사용하고 참조로 전달하는 경우는 클래스를 사용한다.
C#의 구조체는 상속을 할 수 없는 것이지 어떤 인터페이스는 구성할 수 있다.
밑은 예시이다.
struct MyPoint
{
    public int X;
    public int Y;

    public MyPoint(int x, int y)
    {
		this.X = x;
        this.Y = y;
    }

	public override string ToString()
    {
        return string.Format("({0}, {1})", X, Y);
    }
}
string의 ToString()을 새로 정의하여 사용한 것을 볼 수 있다.

C# 클래스도 C++과 거의 비슷하지만 이벤트 핸들러, set, get이 조금 다르다.
이벤트 핸들러는 추후에 다룰 것이니 예제에선 제외했다.
C++ 스타일
class Creature
{
private:
	std::optional<int> m_Cells;
	
public:
	Creature() { m_Cells = std::nullopt; }
	
	std::optional<int> getCell() {
		return m_Cells;
	}
	
	void putCell(std::optional<int>&& cells) {
		if (!m_Cells.has_value())
			m_Cells = cells;
	}
	
	__declspec(property(get = getCell, put = putCell)) std::optional<int> Cell;
	
	void PrintCells() 
	{
		if (m_Cells.has_value())
			cout << "This Creature have " << m_Cells.value() << " Cells" << endl;
		else
			cout << "There are no Cell in this Creature" << endl;
	}
};
C++에서 보통 __declspec(property(get = getCell, put = putCell)) 이 녀석을 잘 쓰진 않는데 C#에서는 자동으로 이렇게 getter, setter를 만들어주기 때문에 C# 예제와 유사하게 만들기 위해 넣었다.
이러면 Creature me; me.Cell = 1; cout << me.Cell.value(); 이렇게 Cell을 통해 m_Cells 값을 직접 다룰 수 있다.

C# 스타일
class Creature
{
    private int? m_Cells;

    public Creature() { m_Cells = null; }
	
    public int? Cell
    {
        get { return m_Cells; }
        set 
        {
            if (m_Cells == null)
                m_Cells = value;
        }
    }
	
    public void PrintCells()
    {
        if (m_Cells != null)
            Console.WriteLine("This Creature have " + m_Cells + " Cells");
        else
            Console.WriteLine("There are no Cell in this Creature");
    }
}
C#에서 setter를 설정할 때 받는 인수는 value가 된다. 그 외에는 대부분 C++과 비슷하다.

- System.Nullable 클래스
C#에서 Compare(), Equals()의 메소드를 제공한다. 이름만 봐도 머하는 녀석인지 알 수 있겠지...?
Compare() 메소드는 C++의 우주선 연산자 <=>와 하는 일이 비슷하다. 비교하는 값의 앞의 녀석이 작다면 -1을 반환하고 같다면 0을, 앞의 녀석이 더 크다면 1을 반환한다.
null 값도 비교를 해주는데 null 제일 작은 것으로 판단한다. uint? n_1 = 0, n_2 = null; Nullable.Compare<uint>(n_1, n_2)의 값은 n_1이 더 크기에 1이 반환된다.
템플릿 기반이기에 자료형을 명시해주어야 한다.
Equals()는 같으면 true, 아니면 false다.

- C# 메서드
1. ref(변수 수정용 참조)
C++의 참조(&)를 C#에서는 ref로 사용한다.
C++ 스타일
void plus_one(int &a) { a++; }

C# 스타일
void plus_one(ref int a) { a++; }
C#에서 주의할 점은 참조를 사용하는 메서드를 호출할 때 int x = 1; plus_one(ref x); 이렇게 넘겨주는 인자가 초기화가 되어있어야 하며 인자를 넣어줄 때도 ref 키워드를 붙여야 한다.

2. out(변수 반환용 참조)
ref랑 살짝 다르다. out을 사용하는 변수는 메서드 내부에서 초기화가 반드시 한번 이상은 되어야 한다.
즉 이러한 void plus_one(out int a) { a++; } 메서드 표현은 불가능하다. a가 메서드 내부에서 초기화되는 부분이 없기 때문이다.
void make_one(out int a) { a = 1; } 이러한 표현은 가능하다. a가 초기화되는 부분이 있기 때문이다.
초기화가 메서드 내부에서 한 번 이상 된다는 가정을 깔고 가기에 ref 변수와 다르게 메서드 밖에서는 초기화를 해줄 필요가 없다.

그 외의 Named 파라미터, Optinal 파라미터, params라는 방식이 있다. (그렇게 효용성이 있어보이진 않아서 따로 설명을 하진 않겠다.)

- C# 이벤트
C# EventHandler를 사용하면 클래스의 값이 변하거나 어떤 메소드가 수행되는 경우 이를 트리거로 삼아 이벤트를 발생시킬 수 있다.
예시를 보는 것이 빠르다.
class Program
{
    class CustomButton
    {
        public string m_BtnText;
        public event EventHandler Click;
        public CustomButton() { m_BtnText = ""; }
        public void MouseLeftBtnDown()
        {
            if (Click != null)
            {
                Click(this, EventArgs.Empty);
            }
        }
    }
    static void Clicked_SetText(object sender, EventArgs args)
    {
        ((CustomButton)sender).m_BtnText = "This is Custom Button";
    }
    static public void Clicked_Print(object sender, EventArgs args)
    {
        Console.WriteLine(((CustomButton)sender).m_BtnText);
    }

    static void Main(string[] args)
    {
        CustomButton btn = new CustomButton();
        btn.Click += new EventHandler(Clicked_SetText);
        btn.Click += new EventHandler(Clicked_Print);
        btn.MouseLeftBtnDown();

        btn.Click -= new EventHandler(Clicked_Print);
        btn.MouseLeftBtnDown();
    }
}
일단 CustomButton 클래스를 만들었고 내부 변수에는 이벤트 핸들러인 Click 녀석이 존재한다. 해당 녀석은 함수 포인터를 여러개 들 수 있는 배열이라고 생각하면 편하다.
btn.Click += new EventHandler(Clicked_SetText); 이렇게 함수 포인터를 추가할 수 있다.
반대로 btn.Click -= new EventHandler(Clicked_Print); 이렇게 핸들러에서 함수 포인터를 제거할 수도 있다.
해당 핸들러를 실행할 때에는 Click(this, EventArgs.Empty); 이렇게 핸들러를 포함한 객체 자신과 이벤트 인자를 넘겨주면 된다.
해당 핸들러가 실행되면 핸들러에 엮여있던 이벤트들이 모두 수행된다.

- 전처리기
#define, #if, #else, #endif 등등... 모두 같다. #region이 조금 다르다.
C++ 스타일
#pragma region some_range
	int i = 0;
#pragma endregion

C# 스타일
#region some_range
    int i = 0;
#endregion

- C++의 stl과 유사하게 C#에 존재하는 자료구조
List<T> - std::vector<T>
Dictionary<TKey, TValue> - unordered_map<Key, Data>
HashSet<T> - unordered_set<Key>
SortedDictionary<TKey, TValue> - std::map<Key, Data>
SortedList<TKey, TValue> - priority_queue<T>와 비슷하지만 이진 트리 기반이라 좀 더 느림
SortedSet<T> - std::set<Key>
Queue<T> - std::queue<T>
Stack<T> - std::stack<T>
LinkedList<T> - std::list<T>